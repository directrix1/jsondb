{"name":"jsondb","tagline":"Off-memory json for large data that does not fit the memory.","body":"\r\n### Installation\r\n\r\nTo install, simply run\r\n\r\n    python setup.py install\r\n\r\n\r\n### Getting started\r\n\r\nTo create a db:\r\n\r\n    import jsondb\r\n    \r\n    # Create from an empty dict (the default)\r\n    db = jsondb.create({})\r\n\r\n    # Or a list / tuple\r\n    db = jsondb.create([])\r\n\r\n\r\nto create from an existing JSON file:\r\n\r\n    db = jsondb.from_file(json_file_path)\r\n    # file-like objects are accepted as well\r\n    db = jsondb.from_file(open(json_file_path, 'rb'))\r\n\r\nNow add some data to the db and access them:\r\n\r\n    db['name'] = 'foo'\r\n    assert db['name'] == 'foo'\r\n\r\n    db['items'] = []\r\n    for i in range(3):\r\n        db['items'].append({\r\n            'id' : i,\r\n            'name': chr(97 + i),\r\n        })\r\n\r\n    assert db['items'][0]['id'] == 0\r\n    assert len(db['items']) == 3\r\n\r\n    assert db.get('nonexists', 'notfound') == 'notfound'\r\n\r\nIt works like an ordinary dict / list,\r\nbut to get its value, use the `data()` method:\r\n\r\n    # => 'foo'\r\n    print db['name'].data() \r\n\r\n    # Get the data\r\n    assert db.data() == {\r\n        'name' : 'foo',\r\n        'items': [\r\n            {'id' : 0, 'name' : 'a'},\r\n            {'id' : 1, 'name' : 'b'},\r\n            {'id' : 2, 'name' : 'c'},\r\n        ]\r\n    }\r\n\r\n\r\n### Querying\r\n\r\njsondb also supports complex queries, in a syntax based on JSONPath,\r\nwhich is described here: http://goessner.net/articles/JsonPath/\r\n\r\n`db.query` returns a `QueryResult` object which is iterable.\r\n\r\n    results = db.query('$.items.name')\r\n\r\n    # Iterating the query result\r\n    #   => \"a b c\"\r\n    for x in results:\r\n        print x.data(),\r\n\r\nTo fetch all the value of the result,\r\n\r\n    # => ['a', 'b', 'c']\r\n    print rslt.values()\r\n\r\nTo fetch only one value,\r\n\r\n    # fetch one result\r\n    assert db.query('$.name').getone() == 'foo'\r\n    # => 'foo'\r\n    db.query('$.name').getone().data()\r\n\r\nExample of more complex queries:\r\n\r\n    # Conditonal query\r\n    #   => 'b'\r\n    print db.query('$.items[?(@.id = 1)].name').getone().data()\r\n\r\n    # slicing\r\n    # => ['a', 'b']\r\n    print db.query('$.items[:-1].name').values()\r\n\r\n\r\n### Persistence\r\n\r\nAll the data is stored on the disk.\r\nIn the current implementation, data is saved as a sqlite database,\r\nbut supports for other DBMS are on the table.\r\n\r\nboth of `create` and `from_file` accept a `url` parameter,\r\nindicating where to store the data:\r\n\r\n    db = jsondb.create({}, url='path/to/filename.db')\r\n    # which is equal to \r\n    db = jsondb.create({}, url='sqlite3://path/to/filename.db')\r\n\r\nWhen not specified, a temporary file will be created in `/tmp` by default.\r\n\r\nTo make sure all the changes made to db being saved to the file,\r\n\r\n    db.save()\r\n\r\nAnd when not needed anymore, remember to close it:\r\n\r\n    db.close()\r\n\r\nOr use context manager:\r\n\r\n    with jsondb.create(url='path/to/filename.db') as db:\r\n        # do all the work here\r\n\r\nTo load an existing jsondb file later,\r\n\r\n    db = jsondb.load('path/to/filename.db')\r\n\r\n\r\n### License\r\n\r\nReleased under the BSD license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}